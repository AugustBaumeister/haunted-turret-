
#include <Arduino.h>
#include <Servo.h>
#include <IRremote.hpp>

#define left 0x8
#define right 0x5A
#define up 0x18
#define down 0x52
#define ok 0x1C
#define cmd1 0x45
#define cmd2 0x46
#define cmd3 0x47
#define cmd4 0x44
#define cmd5 0x40
#define cmd6 0x43
#define cmd7 0x7
#define cmd8 0x15
#define cmd9 0x9
#define cmd0 0x19
#define star 0x16
#define hashtag 0xD

#define DECODE_NEC  

Servo yawServo; 
Servo pitchServo; 
Servo rollServo; 

int yawServoVal = 90; 
int pitchServoVal = 100;
int rollServoVal = 90;

int pitchMoveSpeed = 8; 
int yawMoveSpeed = 90;  
int yawStopSpeed = 90; 
int rollMoveSpeed = 90;
int rollStopSpeed = 90; 

int yawPrecision = 150; 
int rollPrecision = 158; 
int pitchMax = 150; 
int pitchMin = 33; 
void shakeHeadYes(int moves = 3); 
void shakeHeadNo(int moves = 3);

long getDistance() {
  
}

void setup() { 
    Serial.begin(9600); 

    yawServo.attach(10); 
    pitchServo.attach(11); 
    rollServo.attach(12); 

    
    Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));
  
    Serial.print(F("Ready to receive IR signals of protocols: "));
    printActiveIRProtocols(&Serial);
    Serial.println(F("at pin 9"));

    homeServos(); //set servo motors to home position

    
}

void loop() {

    /*
    * Check if received data is available and if yes, try to decode it.
    */
    if (IrReceiver.decode()) {

        /*
        * Print a short summary of received data
        */
        IrReceiver.printIRResultShort(&Serial);
        IrReceiver.printIRSendUsage(&Serial);
        if (IrReceiver.decodedIRData.protocol == UNKNOWN) { 
            Serial.println(F("Received noise or an unknown (or not yet enabled) protocol - if you wish to add this command, define it at the top of the file with the hex code printed below (ex: 0x8)"));
           
            IrReceiver.printIRResultRawFormatted(&Serial, true);
        }
        Serial.println();

        /*
        * !!!Important!!! Enable receiving of the next value,
        * since receiving has stopped after the end of the current received data packet.
        */
        IrReceiver.resume(); 


        /*
        * Finally, check the received data and perform actions according to the received command
        */

        switch(IrReceiver.decodedIRData.command){ 

            case up: //pitch up
              upMove(1);
              break;
            
            case down: //pitch down
              downMove(1);
              break;

            case left: //fast counterclockwise rotation
              leftMove(1);
              break;
            
            case right: //fast clockwise rotation
              rightMove(1);
              break;
            
            case ok: //firing routine 
              fire();
              //Serial.println("FIRE");
              break;
              
            case star:
              fireAll();
              delay(50);
              break;

            case cmd1:
              shakeHeadYes(3);
              break;

            case cmd2:
              shakeHeadNo(3);
              break;

        }
    }
    delay(5);
slowSpin();

  long distance = getDistance();
  if (distance < 50) { 
    // Stop spinning
    yawServo.write(yawStopSpeed); 
    delay(3000); 

    
    fastSpinAndShoot();
  }
  delay(5);
}

void slowSpin() {
  
  yawServo.write(yawStopSpeed + 10); 
  delay(100); 
}

void fastSpinAndShoot() {
  
  for (int i = 0; i < 18; i++) { 
    yawServo.write(yawStopSpeed + 30); 
    delay(100); 
    fire(); 
  }
  yawServo.write(yawStopSpeed); 
}




//////////////////////////////////////////////////
               // FUNCTIONS  //
//////////////////////////////////////////////////


void leftMove(int moves){ 
    for (int i = 0; i < moves; i++){
        yawServo.write(yawStopSpeed + yawMoveSpeed);
        delay(yawPrecision); 
        yawServo.write(yawStopSpeed);
        delay(5); 
        Serial.println("LEFT");
  }

}

void rightMove(int moves){ 
  for (int i = 0; i < moves; i++){
      yawServo.write(yawStopSpeed - yawMoveSpeed); 
      delay(yawPrecision);
      yawServo.write(yawStopSpeed);
      delay(5);
      Serial.println("RIGHT");
  }
}

void upMove(int moves){ 
  for (int i = 0; i < moves; i++){
        if((pitchServoVal+pitchMoveSpeed) < pitchMax){ 
        pitchServoVal = pitchServoVal + pitchMoveSpeed;
        pitchServo.write(pitchServoVal);
        delay(50);
        Serial.println("UP");
      }
  }
}

void downMove (int moves){ 
  for (int i = 0; i < moves; i++){
      if((pitchServoVal-pitchMoveSpeed) > pitchMin){
        pitchServoVal = pitchServoVal - pitchMoveSpeed; 
        pitchServo.write(pitchServoVal);
        delay(50);
        Serial.println("DOWN");
      }
  }
}

void fire() { //function for firing a single dart
    rollServo.write(rollStopSpeed + rollMoveSpeed);
    delay(rollPrecision);
    rollServo.write(rollStopSpeed);
    delay(5); 
    Serial.println("FIRING");
}

void fireAll() { 
    rollServo.write(rollStopSpeed + rollMoveSpeed);
    delay(rollPrecision * 6); 
    rollServo.write(rollStopSpeed);
    delay(5); 
    Serial.println("FIRING ALL");
}

void homeServos(){ 
    yawServo.write(yawStopSpeed); 
    delay(20);
    rollServo.write(rollStopSpeed); 
    delay(100);
    pitchServo.write(100); 
    delay(100);
    pitchServoVal = 100; 
    Serial.println("HOMING");
}

void shakeHeadYes(int moves = 3) { 
      Serial.println("YES");

    if ((pitchMax - pitchServoVal) < 15){
      pitchServoVal = pitchServoVal - 15;
    }else if ((pitchServoVal - pitchMin) < 15){
      pitchServoVal = pitchServoVal + 15;
    }
    pitchServo.write(pitchServoVal);

    int startAngle = pitchServoVal; 
    int lastAngle = pitchServoVal;
    int nodAngle = startAngle + 15; 

    for (int i = 0; i < moves; i++) { 
        
        for (int angle = startAngle; angle <= nodAngle; angle++) {
            pitchServo.write(angle);
            delay(7); 
        }
        delay(50); 
        
        for (int angle = nodAngle; angle >= startAngle; angle--) {
            pitchServo.write(angle);
            delay(7); 
        }
        delay(50); 
    }
}

void shakeHeadNo(int moves = 3) {
    Serial.println("NO");

    for (int i = 0; i < moves; i++) { 
        
        yawServo.write(140);
        delay(190); 
        yawServo.write(yawStopSpeed);
        delay(50);
        yawServo.write(40);
        delay(190); 
        yawServo.write(yawStopSpeed);
        delay(50); 
    }
}
   
